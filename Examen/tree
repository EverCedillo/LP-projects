#lang racket
(define (make-node data left right)(list data left right))
(define (left-node node) (cadr node))
(define (right-node node) (caddr node))
(define (data-node tree) (car tree))

(define (make-tree data) (make-node data '() '() ))
(define (empty-tree? t) (or (empty? t) (null? t)))


(define (inorder-tree t)
  (if (empty-tree? t)
      '()
      (append (inorder-tree (left-node t))
              (list(data-node t))
              (inorder-tree (right-node t)))))
(define (preorder-tree t)
  (if (empty-tree? t)
      '()
      (append (list(data-node t))
              (preorder-tree (left-node t))
              (preorder-tree (right-node t)))))
(define (postorder-tree t)
  (if (empty-tree? t)
      '()
      (append (postorder-tree (left-node t))
              (postorder-tree (right-node t))
              (list(data-node t)))))

(define (insert-tree t d)
  (cond
    ((empty-tree? t) (make-node d '() '()))
    ((< d (data-node t))(make-node (data-node t)(insert-tree (left-node t) d)(right-node t)))
    ((> d (data-node t))(make-node (data-node t)(left-node t)(insert-tree (right-node t) d)))
    ((= d (data-node t)) t)))
(define (member-tree? t d)
  (cond
    ((empty-tree? t) #f)
    ((= d (data-node t)) #t)
    ((< d (data-node t))(member-tree? (left-node t) d))
    ((> d (data-node t))(member-tree? (right-node t) d))))
(define (insert-list-to-tree l t)
  (if (null? l)
      t
      (insert-list-to-tree (cdr l) (insert-tree t (car l)))))
      
(define (delete-tree t d)(if (member-tree? t d)(insert-list-to-tree (remove d (inorder-tree t)) '())t))
  

  
;√Årbol de ejemplo  
(define t(make-tree 4))
(define t1(insert-tree t 3))
(define t2(insert-tree t1 5))
(define t3(insert-tree t2 7))
    